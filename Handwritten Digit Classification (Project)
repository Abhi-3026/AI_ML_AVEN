{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNsQ6DiST1OG+RSlCAt0zay",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Abhi-3026/AI_ML_AVEN/blob/main/Handwritten%20Digit%20Classification%20(Project)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "23oTfdGp3SZb"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "import seaborn as sns\n",
        "import keras\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.datasets import mnist\n",
        "\n",
        "def load_data():\n",
        "  (X_train, y_train), (X_test, y_test) = mnist.load_data()\n",
        "  return X_train, y_train, X_test, y_test\n",
        "\n",
        "X_train, y_train, X_test, y_test  = load_data()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vhaqvMAZ3xpV",
        "outputId": "e4b5da36-f6a0-4ca9-9d7e-cd1fe8cdd851"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n",
            "11490434/11490434 [==============================] - 1s 0us/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(X_train.shape)\n",
        "print(y_train.shape)\n",
        "print(X_test.shape)\n",
        "print(y_test.shape)\n",
        "\n",
        "print(y_train[0:8])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tw61z0U25yZb",
        "outputId": "dc07df43-f51b-4e66-9f47-65ecafb36988"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(60000, 28, 28)\n",
            "(60000,)\n",
            "(10000, 28, 28)\n",
            "(10000,)\n",
            "[5 0 4 1 9 2 1 3]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(np.amax(X_train))\n",
        "print(np.amin(X_train))\n",
        ""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Imb1mKAJ528K",
        "outputId": "e523b521-4ab4-40d4-9854-d1ffbefac772"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "255\n",
            "0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for i in range(0,3):\n",
        "  pixels=X_train[i]\n",
        "  plt.imshow(pixels, cmap = plt.cm.binary)\n",
        "  plt.show()\n",
        "  print(\"Label of image is\", y_train[i])\n",
        ""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "IWY8muip58u_",
        "outputId": "b50193dc-9336-4e93-c4a1-aa98ef075141"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Label of image is 5\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Label of image is 0\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Label of image is 4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def convert_dtype(x):\n",
        "\n",
        "    x_float=x.astype('float32')\n",
        "    return x_float\n",
        "\n",
        "X_train = convert_dtype(X_train)\n",
        "X_test = convert_dtype(X_test)\n",
        "\n"
      ],
      "metadata": {
        "id": "3AUd2Frr6Be4"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def normalize(x):\n",
        "  y = (x - np.min(x))/np.ptp(x)   #ptp function is used to find the range\n",
        "  return y\n",
        "\n",
        "X_train = normalize(X_train)\n",
        "X_test = normalize(X_test)"
      ],
      "metadata": {
        "id": "TzcLAHbz6IS0"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# to check if train_samples is normalized or not\n",
        "np.isclose(np.amax(X_train), 1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HRvtbLlZ6OrS",
        "outputId": "922fc8e5-18f3-4bcd-e5e9-66272eaa2cd6"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# We need to reshape our train_data to be of shape (samples, height, width, channels) pass to Conv2D layer of keras\n",
        "\n",
        "def reshape(x):\n",
        "\n",
        "    x_r=x.reshape(x.shape[0],x.shape[1],x.shape[2],1)\n",
        "    return x_r\n",
        "\n",
        "X_train = reshape(X_train)\n",
        "X_test = reshape(X_test)"
      ],
      "metadata": {
        "id": "FYzWcHJw6THu"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def oneHot(y, Ny):\n",
        "\n",
        "    import tensorflow\n",
        "    from keras.utils import to_categorical\n",
        "    Ny=len(np.unique(y))\n",
        "    y_oh=to_categorical(y,num_classes=Ny)\n",
        "    return y_oh\n",
        "\n",
        "# example\n",
        "y_train = oneHot(y_train, 10)\n",
        "y_test = oneHot(y_test, 10)\n",
        "\n"
      ],
      "metadata": {
        "id": "Zg3uQm6E6Xx4"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.layers import Conv2D, MaxPool2D, Flatten, Dense, Dropout\n",
        "from keras.models import Sequential\n",
        "model = Sequential([\n",
        "Conv2D(filters=32, kernel_size=(3, 3), padding='same', strides=(1,1), activation='relu', input_shape=(28, 28, 1)),\n",
        "MaxPool2D(pool_size=(2, 2), strides=(2, 2)),\n",
        "Dropout(0.2),\n",
        "Conv2D(filters=64, kernel_size=(3, 3), padding='same', strides=(1,1), activation='relu'),\n",
        "MaxPool2D(pool_size=(2, 2), strides=(2, 2)),\n",
        "Dropout(0.2),\n",
        "Flatten(),\n",
        "Dense(units=128, activation='relu'),\n",
        "Dense(units=10, activation='softmax'),\n",
        "])"
      ],
      "metadata": {
        "id": "1qQYTxRo6bF5"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "from keras.optimizers import Adam\n",
        "from keras.losses import CategoricalCrossentropy\n",
        "from keras.metrics import CategoricalAccuracy\n",
        "\n",
        "model.compile(optimizer=Adam(learning_rate=0.001),\n",
        "            loss=CategoricalCrossentropy(),\n",
        "            metrics=[\"acc\"])"
      ],
      "metadata": {
        "id": "3d-o2rN-6fUj"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "results = model.fit(X_train, y_train, epochs=10, batch_size=256, validation_data=(X_test, y_test))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2Bqt6wlk6jSe",
        "outputId": "0ffd2c98-3d71-4656-f658-42c569767227"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "235/235 [==============================] - 75s 310ms/step - loss: 0.3160 - acc: 0.9081 - val_loss: 0.0824 - val_acc: 0.9740\n",
            "Epoch 2/10\n",
            "235/235 [==============================] - 68s 290ms/step - loss: 0.0822 - acc: 0.9748 - val_loss: 0.0462 - val_acc: 0.9856\n",
            "Epoch 3/10\n",
            "235/235 [==============================] - 71s 303ms/step - loss: 0.0597 - acc: 0.9820 - val_loss: 0.0402 - val_acc: 0.9864\n",
            "Epoch 4/10\n",
            "235/235 [==============================] - 68s 288ms/step - loss: 0.0481 - acc: 0.9847 - val_loss: 0.0413 - val_acc: 0.9868\n",
            "Epoch 5/10\n",
            "235/235 [==============================] - 68s 288ms/step - loss: 0.0382 - acc: 0.9882 - val_loss: 0.0273 - val_acc: 0.9909\n",
            "Epoch 6/10\n",
            "235/235 [==============================] - 67s 286ms/step - loss: 0.0336 - acc: 0.9897 - val_loss: 0.0277 - val_acc: 0.9902\n",
            "Epoch 7/10\n",
            "235/235 [==============================] - 70s 299ms/step - loss: 0.0294 - acc: 0.9904 - val_loss: 0.0260 - val_acc: 0.9910\n",
            "Epoch 8/10\n",
            "235/235 [==============================] - 67s 287ms/step - loss: 0.0252 - acc: 0.9919 - val_loss: 0.0275 - val_acc: 0.9909\n",
            "Epoch 9/10\n",
            "235/235 [==============================] - 67s 285ms/step - loss: 0.0223 - acc: 0.9928 - val_loss: 0.0205 - val_acc: 0.9920\n",
            "Epoch 10/10\n",
            "235/235 [==============================] - 67s 286ms/step - loss: 0.0194 - acc: 0.9938 - val_loss: 0.0245 - val_acc: 0.9912\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pickle\n",
        "\n",
        "pickle.dump(model, open('model.pth', 'wb'))\n",
        ""
      ],
      "metadata": {
        "id": "NAYhX9Qx6oLg"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "results.history.keys()\n",
        "import matplotlib.pyplot as plt\n",
        "plt.plot(range(len(results.history['val_loss'])), results.history['val_loss'])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "id": "AcrZtCkJ9fKH",
        "outputId": "1644df14-68fa-4bfd-9cb0-918a3e2966b6"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def predict(x):\n",
        "    y = model.predict(x)\n",
        "    return y\n",
        "\n",
        "predicted_labels_train = predict(X_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FtlriKXZ93xO",
        "outputId": "9326ed8d-01a2-4b88-bfb7-fc12fbb59965"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1875/1875 [==============================] - 24s 12ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def oneHot_tolabel(y):\n",
        "    y_b=[]\n",
        "    from sklearn.preprocessing import LabelEncoder\n",
        "    labelencoder = LabelEncoder()\n",
        "    y_b[:, 0] = labelencoder.fit_transform(y_b[:, 0])\n",
        "    return y_b\n",
        ""
      ],
      "metadata": {
        "id": "oV2wEa6n_olQ"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def create_confusion_matrix(true_labels, predicted_labels):\n",
        "\n",
        "    from sklearn.metrics import confusion_matrix\n",
        "    cm = confusion_matrix(true_labels.argmax(axis=1), predicted_labels.argmax(axis=1))\n",
        "    return cm\n",
        "\n",
        "cm = create_confusion_matrix((y_train), (predict(X_train)))\n",
        "print(cm)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2LdGpFIdAMA3",
        "outputId": "638c3878-7892-4f9e-df00-9005864bd153"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1875/1875 [==============================] - 25s 13ms/step\n",
            "[[5911    0    0    0    0    0   11    0    0    1]\n",
            " [   0 6736    2    0    0    0    3    1    0    0]\n",
            " [   0    1 5957    0    0    0    0    0    0    0]\n",
            " [   0    0    8 6115    0    4    0    1    0    3]\n",
            " [   0    6    0    0 5810    0    6    1    1   18]\n",
            " [   1    1    0    7    0 5392   17    1    0    2]\n",
            " [   1    0    0    0    0    0 5917    0    0    0]\n",
            " [   0   13   12    0    0    0    0 6234    1    5]\n",
            " [   9    6    8    2    1    6   23    1 5787    8]\n",
            " [   1    4    0    1    4    7    0   13    0 5919]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot Confusion matrix\n",
        "sns.heatmap(cm.T, square=True, annot=True, cbar=False, cmap=plt.cm.Blues, fmt='.0f')\n",
        "plt.xlabel('Predicted Values')\n",
        "plt.ylabel('True Values');\n",
        "plt.show();"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "id": "agiDl2FOAZyC",
        "outputId": "93ce0d2e-8a3b-4283-db99-610f7b179afb"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install Streamlit -q\n",
        ""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Nhel3cF6AmeI",
        "outputId": "d6689099-b72c-4a15-b6f8-03734dc65159"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m8.1/8.1 MB\u001b[0m \u001b[31m13.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.3/207.3 kB\u001b[0m \u001b[31m14.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.8/4.8 MB\u001b[0m \u001b[31m25.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m83.0/83.0 kB\u001b[0m \u001b[31m7.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.7/62.7 kB\u001b[0m \u001b[31m6.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install streamlit-drawable-canvas --quiet"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xbdw_rZOAx6S",
        "outputId": "548d6bd8-3b69-4fd7-9062-8f6122c686c5"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/1.2 MB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[91m━━━━\u001b[0m\u001b[91m╸\u001b[0m\u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.1/1.2 MB\u001b[0m \u001b[31m4.0 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K     \u001b[91m━━━━━━━━━━━━━━━━━\u001b[0m\u001b[91m╸\u001b[0m\u001b[90m━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.5/1.2 MB\u001b[0m \u001b[31m7.2 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K     \u001b[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[91m╸\u001b[0m\u001b[90m━━━━━━━━━\u001b[0m \u001b[32m0.9/1.2 MB\u001b[0m \u001b[31m8.5 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.2/1.2 MB\u001b[0m \u001b[31m8.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import requests\n",
        "\n",
        "def get_public_ip():\n",
        "    response = requests.get('https://api.ipify.org')\n",
        "    return response.text\n",
        "\n",
        "public_ip = get_public_ip()\n",
        "print(f\"Public IP Address: {public_ip}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-WTkypgPA3xG",
        "outputId": "f4b9793a-d2b2-4de1-80b8-47a48acd227e"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Public IP Address: 34.80.226.185\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!streamlit run app.py & npx localtunnel --port 8501"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u4R2APhjBCse",
        "outputId": "23693ffe-ca8b-4fe5-b15f-21479a68f2fc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Usage: streamlit run [OPTIONS] TARGET [ARGS]...\n",
            "Try 'streamlit run --help' for help.\n",
            "\n",
            "Error: Invalid value: File does not exist: app.py\n",
            "\u001b[K\u001b[?25hnpx: installed 22 in 5.965s\n",
            "your url is: https://heavy-cooks-kneel.loca.lt\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "_Tnm4Wp3BVuo"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}